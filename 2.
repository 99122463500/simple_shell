#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

#define MAX_INPUT_SIZE 1024
#define MAX_ARGS 64

void display_prompt(void) {
    printf("#cisfun$ ");
    fflush(stdout);
}

int parse_input(char *input, char **args) {
    int argc = 0;
    char *token = strtok(input, " \t\n");

    while (token != NULL && argc < MAX_ARGS - 1) {
        args[argc++] = token;
        token = strtok(NULL, " \t\n");
    }

    args[argc] = NULL;  // Null-terminate the array of arguments
    return argc;
}

int main(void) {
    char input[MAX_INPUT_SIZE];
    char *args[MAX_ARGS];

    while (1) {
        display_prompt();

        if (fgets(input, sizeof(input), stdin) == NULL) {
            printf("\n");
            break;  // End of file (Ctrl+D)
        }

        input[strcspn(input, "\n")] = '\0';  // Remove trailing newline

        if (strcmp(input, "exit") == 0) {
            break;
        }

        int argc = parse_input(input, args);

        if (argc > 0) {
            pid_t pid = fork();

            if (pid == -1) {
                perror("fork");
                exit(EXIT_FAILURE);
            }

            if (pid == 0) {  // Child process
                execvp(args[0], args);

                // If execvp fails
                perror("execvp");
                exit(EXIT_FAILURE);
            } else {  // Parent process
                int status;
                waitpid(pid, &status, 0);

                if (WIFEXITED(status) && WEXITSTATUS(status) != 0) {
                    fprintf(stderr, "./shell: command not found: %s\n", args[0]);
                }
            }
        }
    }

    return 0;
}

